using JuMP, CPLEX, LinearAlgebra, ProgressMeter

#example problem

A = [ -3 2 4 ; 3 1 -1; 1 -2 9; -1 0 0; 0 -1 0; 0 0 -1]
b = [9 ; 8 ; 2; 0; 0; 0]

c = [1 ; -2; 3]




#Asum = sum(A,dims=2) #row sum
#Asigns = sign.(A) #

function Vbounds(A,c)
    n,m = size(A)

    minV=-Inf*ones(m)
    maxV=Inf*ones(m)

    for row in eachrow(A)
        if sum(row) !=0
            rowSum = row/sum(row)
            for index in eachindex(rowSum)
                if rowSum[index] < 0
                    if -rowSum[index] < maxV[index]
                        maxV[index]=-rowSum[index]
                    end
                elseif rowSum[index] > 0
                    if -rowSum[index] > minV[index]
                        minV[index]=-rowSum[index]
                    end
                end
            end
        end
    end

    if sum(c) !=0
        rowSum = c/sum(c)
        for index in eachindex(rowSum)
            if rowSum[index] < 0
                if -rowSum[index] < maxV[index]
                    maxV[index]=-rowSum[index]
                end
            elseif rowSum[index] > 0
                if -rowSum[index] > minV[index]
                    minV[index]=-rowSum[index]
                end
            end
        end
    end


    return minV, maxV
end


minV, maxV = Vbounds(A,c)



# maximise c'x
# while Ax<=b

function orientationMIP(A,b,c)
    n,m = size(A)
    orientationModel = Model(CPLEX.Optimizer)

    @variable(orientationModel, x[1:m] )

    @variable(orientationModel, u[1:m], Bin)

    @objective(orientationModel, Max, c' * x)

    @constraint(orientationModel, mainConstraint1, A * (x+u.-(1/2)) .<= b)

    @constraint(orientationModel, mainConstraint2, A * (x-u.+(1/2)) .<= b)

    TT = stdout # save original STDOUT stream
    redirect_stdout()

    optimize!(orientationModel)

    redirect_stdout(TT)

    return value.(x), 2*(value.(u) .-1/2)
end

flotSol, orientation = orientationMIP(A,b,c)


#u=[1,1,1]
function myMethod(A,b,c,minV,maxV,orientation,u)
    n,m = size(A)
    myMethodModel = Model(CPLEX.Optimizer)
    #BigM = 1000
    @variable(myMethodModel, x[1:m])

    @variable(myMethodModel, v[1:m])

    @variable(myMethodModel, q[1:m] <=0)

    @variable(myMethodModel, r[1:m] >=0)

    @variable(myMethodModel, Q )

    @variable(myMethodModel, R)

    @variable(myMethodModel, V)

    @objective(myMethodModel, Max, c'*x)


    #@objective(myMethodModel, Max, c'*x-(1/2)*c'*((u .* v)' .+I(m).*u)*sign.(c))

    #@objective(myMethodModel, Max, c'*x+(1/2)*c'*((u .* v)' .+I(m).*u)*sign.(c))

    #@constraint(myMethodModel, vMin,
    #    sum(v)>=-1
    #)

    @constraint(myMethodModel, vSumUp,
        V >= sum(v)+1
    )

    @constraint(myMethodModel, vSumDown,
        V <= sum(v)+1
    )


    @constraint(myMethodModel, MainCon[i=1:n],
        #A[i,:]'*x.+(1/2)*A[i,:]'*((u .* v)' .+I(m).*u)*sign.(A[i,:]) <= b[i]

        #A[i,:]'*x.+(1/2)*A[i,:]'*(u .* v)'*sign.(A[i,:]) <= b[i] -(1/2)*A[i,:]'*(I(m).*u)*sign.(A[i,:])

        #A[i,:]'*x.+(1/2)*A[i,:]'*fill((u .* v)'*sign.(A[i,:]),m) <= b[i] -(1/2)*A[i,:]'*(I(m).*u)*sign.(A[i,:])

        A[i,:]'*x +  (u.*v)'*abs.(A[i,:])*(1/2) <= b[i] -u'*abs.(A[i,:])*(1/2)
    )

    #@showprogress for i=1:n
        #A[i,:]'*x.+(1/2)*A[i,:]'*fill((u .* v)'*sign.(A[i,:]),m)
        #b[i] -(1/2)*A[i,:]'*(I(m).*u)*sign.(A[i,:])

        #A[i,:]'*(x+fill((1/2)*(u .* v)'*sign.(A[i,:]),m))
        #b[i] -(1/2)*A[i,:]'*(I(m).*u)*sign.(A[i,:])
        #b[i] -(1/2)*(A[i,:].*u)'*sign.(A[i,:])


    #    b[i] -u'*abs.(A[i,:])*(1/2)
        #A[i,:]'*(x.+(1/2)*(u .* v)'*sign.(A[i,:]))


    #    A[i,:]'*x +  (u.*v)'*abs.(A[i,:])*(1/2)
    #end




    @constraint(myMethodModel, vBoundsUpper[j=1:m],
        v[j]<=0
    )

    for j=1:m
        set_normalized_rhs(vBoundsUpper[j], maxV[j])
    end

    @constraint(myMethodModel, vBoundsLower[j=1:m],
        -v[j]<=0
    )

    for j=1:m
        set_normalized_rhs(vBoundsLower[j], -minV[j])
    end

    @constraint(myMethodModel, qBound[j=1:m],
        q[j] <= orientation[j]*v[j]
    )

    @constraint(myMethodModel, rBound[j=1:m],
        r[j] >= orientation[j]*v[j]
    )

    @constraint(myMethodModel, qSumUp,
        Q >= sum(q)
    )

    @constraint(myMethodModel, qSumDown,
        Q <= sum(q)
    )


    @constraint(myMethodModel, rSumUp,
        R >= sum(r)
    )

    @constraint(myMethodModel, rSumDown,
        R <= sum(r)
    )


    @constraint(myMethodModel, orientation11[j=1:m],
    Q-q[j]+orientation[j]*(v[j]-V)>=-u[j]*V
    )

    @constraint(myMethodModel, orientation12[j=1:m],
    R-r[j]+orientation[j]*(v[j]-V)<=u[j]*V
    )
    @constraint(myMethodModel, orientation21[j=1:m],
    Q-q[j]>=-u[j]*V
    )

    @constraint(myMethodModel, orientation22[j=1:m],
    R-r[j]<=u[j]*V
    )




    TT = stdout # save original STDOUT stream
    redirect_stdout()



    foo = @time begin
        optimize!(myMethodModel)


    redirect_stdout(TT)

    if termination_status(myMethodModel) == MOI.OPTIMAL
        return objective_value(myMethodModel), value.(x), value.(v) foo
        #return objective_value(actualTest)
    else
        return NaN, ones(m)*NaN, ones(m)*NaN foo
        #NaN
    end
end

#uRange = 1:0.1:1.1
n,m = size(A)
#uIterator = Iterators.product(fill(uRange, 1,m)...)


#objVal = zeros(prod(size(uIterator)))
#xVal = zeros(prod(size(uIterator)),m)
#vVal = zeros(prod(size(uIterator)),m)
#uComb = zeros(prod(size(uIterator)),m)



#@showprogress for (index, value) in enumerate(uIterator)
#    objVal[index], xVal[index,:], vVal[index,:] =myMethod(A,b,c,minV,maxV,orientation,collect(value))
#    uComb[index,:]=collect(value)
#end

numReps = 3000

objVal = zeros(numReps)
xVal = zeros(numReps,m)
vVal = zeros(numReps,m)
uComb = zeros(numReps,m)
foo = zeros(numReps,m)


@showprogress for i = 1:numReps
    u = rand(m) .+0.5
    objVal[i], xVal[i,:], vVal[i,:], foo[i,:] =myMethod(A,b,c,minV,maxV,orientation,u)
    uComb[i,:]=u
end


objValCompact = objVal[(!isnan).(objVal)]
xValCompact = xVal[(!isnan).(objVal),:]
vValCompact = vVal[(!isnan).(objVal),:]
uCombCompact = uComb[(!isnan).(objVal),:]

#trueXVal = round.(xValCompact)
#trueObjVal = vec(sum(c'.*trueXVal,dims=2))

function intFinder(c,initX,u,v,m)
    #tranMatrix = ((u .* v)' .+I(m).*u)
    normMatrix = inv((u .* v)' .+I(m).*u)

    #xLow = floor.(initX)

    intFinderModel = Model(CPLEX.Optimizer)
    #@variable(intFinderModel, x[1:m], Int)
    @variable(intFinderModel, x[1:m], Int)

    #set_start_value.(x, round.(initX))

    @objective(intFinderModel, Max, c'*x)

    #@constraint(intFinderModel, LowerCon[i=1:m],
        #verified
        #(normMatrix'*I(m)[:,i])'*(x-initX+tranMatrix*ones(m).*1/2)>=0
        #normMatrix[i,:]'*(x-initX)>=-normMatrix[i,:]'*tranMatrix*ones(m).*1/2

        #normMatrix[i,:]'*x>=-normMatrix[i,:]'*tranMatrix*ones(m).*1/2 +normMatrix[i,:]'*initX


        #normMatrix*x>=-ones(m).*1/2 + normMatrix*initX



    #)

    #@constraint(intFinderModel, UpperCon[i=1:m],
        #(normMatrix'*I(m)[:,i])'*(x-initX-tranMatrix*ones(m).*1/2)<=0
        #normMatrix[i,:]'*(x-initX)<=normMatrix[i,:]'*tranMatrix*ones(m).*1/2

        #normMatrix[i,:]'*x<=normMatrix[i,:]'*tranMatrix*ones(m).*1/2 +normMatrix[i,:]'*initX

        #normMatrix*x<=ones(m).*1/2 + normMatrix*initX

    #)

    @constraint(intFinderModel, LowerCon,normMatrix*x.>=-ones(m).*1/2 + normMatrix*initX)
    #x.>=(-1/2)*tranMatrix*ones(m)+initX-floor.(initX)


    #@constraint(intFinderModel, MinVal,c'*x>=c'*round.(initX))

    @constraint(intFinderModel, UpperCon,normMatrix*x.<=ones(m).*1/2 + normMatrix*initX)



    #x.<=(1/2)*tranMatrix*ones(m)+initX-floor.(initX)

    TT = stdout # save original STDOUT stream
    redirect_stdout()

    optimize!(intFinderModel)

    redirect_stdout(TT)

    if termination_status(intFinderModel) == MOI.OPTIMAL
        #return objective_value(intFinderModel)+c'*floor.(initX), value.(x)+floor.(initX)
        return objective_value(intFinderModel), value.(x)
    else
        return NaN, ones(m)*NaN
    end
end

trueObjVal = zeros(size(objValCompact,1))
trueXVal = zeros(size(objValCompact,1),m)


@showprogress for i =1:size(objValCompact,1)
    trueObjVal[i], trueXVal[i,:]= intFinder(c,xValCompact[i,:],uCombCompact[i,:],vValCompact[i,:],m)

end

function ActualSol(A,b,c)
    actualModel = Model(CPLEX.Optimizer)
    @variable(actualModel, x[1:size(A,2)], Int)
    @objective(actualModel, Max, c'*x)
    @constraint(actualModel,generic, A*x.<=b)
    optimize!(actualModel)
    return value.(x), objective_value(actualModel)
end

actualXVal, actualObjVal = ActualSol(A,b,c)
